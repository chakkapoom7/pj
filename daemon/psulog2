#!/usr/bin/perl -w

use strict;
use warnings;
use
use Data::Dumper;
use List::Util 'max';
use List::MoreUtils qw(uniq);
use File::Basename;

# MYSQL CONFIG VARIABLES
my $driver = "mysql";
my $userid = "root";
my $password = "kks*5cvp768";
my $radhost = "localhost";
my $loghost = "localhost";


my $database = "proj";

my $database2 = "radius";

my $dsn = "DBI:$driver:database=$database:$loghost";
my $dsn2 = "DBI:$driver:database=$database2:$radhost";

# PERL MYSQL CONNECT()
my $dbh = DBI->connect($dsn, $userid, $password , {AutoCommit => 0,RaiseError => 1,} );
my $dbh2 = DBI->connect($dsn2, $userid, $password , {AutoCommit => 0,RaiseError => 1,} );


my @init;
my $switch_v6address;
my $interval;
my $datetimeGlobal;


my @arraynew88;
my @arraynew99;
my %hash00;

sub ecchor {

} 

sub addZero{
  my $tmpValue = $_[0];
  if((length $tmpValue) == 1){
    return "0$tmpValue";
  }else{
    return $tmpValue;
  }
}

sub macFormat{
  my $mac = $_[0];
  chomp($mac);
  $mac = uc($mac);
  #print "\n$mac\n";
  my @macElement = split(":",$mac);

  my $i;
  my $size = @macElement;
  for (my $i = 0 ; $i < $size  ; $i++ ){
    $macElement[$i] = addZero($macElement[$i]);
  }
  return "$macElement[0]-$macElement[1]-$macElement[2]-$macElement[3]-$macElement[4]-$macElement[5]";
}


sub getInitialValue{
  open(File,"config.cnf");

  my @AllFile = <File>;
  close(File);
  chomp @AllFile;
  return @AllFile;
}

sub v6_16to32{
  my $v16 = ($_[0]) ;
  my @pctmp = split(":",$v16);
  my $v32 = "$pctmp[0]$pctmp[1]:$pctmp[2]$pctmp[3]:$pctmp[4]$pctmp[5]:$pctmp[6]$pctmp[7]:$pctmp[8]$pctmp[9]:$pctmp[10]$pctmp[11]:$pctmp[12]$pctmp[13]:$pctmp[14]$pctmp[15]";
  #print "$v32";
  return $v32;
}

sub getv6{
my $ip_address = $_[0] ;
chomp($ip_address);
my $i;
my $nnn;
#$nnn = scalar @arraynew99;
#print "$nnn \n";
my $initdata = "snmpwalk -c public -v 1 udp6:[$ip_address] IP-MIB::ipNetToPhysicalPhysAddress";

 #print "$data\n";
 my $indexn = @arraynew99 ;
 #print "---- $indexn\n";
for($i=0;$i<$indexn;$i++){
#print "----------------- $arraynew99[$i] --------------------\n";
  #Using System Command and keep resault to $data

my $data = ();
$data = `$initdata | grep  "$arraynew99[$i]"` ;
  #print "$data\n";
  #`;

 

  #print "$arraynew99[$i]\n";

  chomp($data);

  my @aaa = split("IP-MIB::ipNetToPhysicalPhysAddress.",$data);
  my @bbb ;
  my $line = 0;
  my $iden = 0;
  my $size = @aaa - 1 ;

  shift(@aaa);

  #loop
  for (my $i = 0 ; $i < $size  ; $i++ ){
    $iden=0;

    my $tmp = $i;
    my @tmp2 = split("\" = STRING: ",$aaa[$tmp]);
    chomp(@tmp2);

    #Fillter No mac address
    if(length($tmp2[1]) < 11 ){
      $iden++ ;
    }

    my @tmp3 = split(".ipv6.\"",$tmp2[0]);

    $tmp2[0] =	v6_16to32($tmp3[1]);

    $aaa[$tmp] = "mac: $tmp2[1] \t\tipv6: $tmp2[0]"; #######################################################

    if($iden == 0){
      $bbb[$line][0] = "$tmp2[1]";
     # print "$bbb[$line][0]  ";
      $bbb[$line][1] = "$tmp2[0]";
     # print "$bbb[$line][1]  \n";
      my $mmmmm = macFormat($bbb[$line][0]);
      my $nnnn = uc($bbb[$line][1]);
      toDB($mmmmm,$nnnn);
      $line++ ;
    }
  }

}

  #print "resault of v6:  $line  line    of  $size \n\n";
  #print "$bbb[0][0] - - $bbb[0][1]\n";

  #return @bbb;
}

sub removeJ{
  my $pain = ($_[0]) ;
  my @tmp = split(/\./,$pain);
  my $removed = "$tmp[1].$tmp[2].$tmp[3].$tmp[4]";
  #print "$removed\n";
  return $removed;
}

sub getv4{
  my $ip_address = $_[0] ;


  chomp($ip_address);
  #Using System Command and keep resault to $data
  my $data = `snmpwalk -c public -v 1 udp6:[$ip_address] IP-MIB::ipNetToMediaPhysAddress  | grep 172.30.231.*`; ######### v4 snmp command ##
  chomp($data);


  #print "$data\n\n";


  my @aaa = split("IP-MIB::ipNetToMediaPhysAddress.",$data);
  my @bbb ;   #*************************
  my $line = 0;
  my $iden = 0;
  my $size = @aaa - 1 ;#**********************

  shift(@aaa);#*************

  #loop
  for (my $i = 0 ; $i < $size  ; $i++ ){
    $iden=0;

    my $tmp = $i;
    chomp($aaa[$tmp]);
    #print "aaa = $aaa[$tmp]\n";
    my @tmp2 = split(" = STRING: ",$aaa[$tmp]);
    chomp(@tmp2);
    #print "tmp2 = $tmp2[0] + $tmp2[1]\n";

    #Fillter No mac address
    if(length($tmp2[1]) < 11 ){
      $iden++ ;
    }

    if($iden == 0){
      $bbb[$line][0] = "$tmp2[1]";
      #removeJ($tmp2[0]);
      $bbb[$line][1] = removeJ($tmp2[0]);
      

      push @arraynew88, $bbb[$line][0];

      my $wwwwww = macFormat($bbb[$line][0]);
      toDB($wwwwww,$bbb[$line][1]);

      

      #print "$bbb[$line][0]  $wwwwww  $bbb[$line][1]\n";
      $line ++ ;
    }
    @arraynew99 = uniq @arraynew88;
  }


 



  return @bbb;
}


sub toDB {
  my @datapack = @_;
#  my (@datapack) = @_ ;
  #print "$datapack[0]  $datapack[1] \n";

  my $strtemp;
  if(!$hash00{$datapack[0]}){
    $strtemp = "-";
  }
  else{
    $strtemp = $hash00{$datapack[0]};
  }

  print "$datapack[0] \t $datetimeGlobal \t radacct ref = >   $strtemp \t $datapack[1]\n";
  
  if ($strtemp !="-" ){
    
=comment 
 my $strquery1 = "SELECT acctstarttime, acctstoptime, radacctid, callingstationid FROM radacct WHERE STR_TO_DATE( acctstarttime,  '%Y-%m-%d %H:%i:%s' ) <  '$datetimeGlobal' AND ( STR_TO_DATE( acctstoptime,  '%Y-%m-%d %H:%i:%s' ) >  '$datetimeGlobal'   OR acctstoptime IS NULL ) ORDER BY STR_TO_DATE( acctstarttime,  '%Y-%m-%d %H:%i:%s' ) DESC ";
  



  #############################################  SELECT * FROM `ipRef` WHERE `radRefId` =  ########################################################



  #print "$strquery1 \n";

  my $sth2 = $dbh2->prepare("$strquery1");

  $sth2->execute()  or die $DBI::errstr;
  
  my $row;
  my $strnull;
  while ($row = $sth2->fetchrow_arrayref()) {

      if(!@$row[1]){
        $strnull = "-";
      }
      else {
        $strnull = @$row[1];
      }
      print "@$row[0] \t  $strnull \t @$row[2] \t @$row[3] \n";



      # check by mac if have same mac more than 1 reccord  use last
      if(!$hash00{@$row[3]}){
        # add [ mac | radacct ref ] to hash array
        $hash00{@$row[3]} = @$row[2];
      }
  }




  print Dumper(\%hash00);

  $sth2->finish();
  $dbh2->commit or die $DBI::errstr;
=cut
  }    

}




#####################################################  get value #########################################
sub getValue{    
  print "getting data from switch. . . \n";
  my $taget_v6address = ($_[0]) ;

  (my $sec,my $min,my $hour,my $mday,my $mon,my $year,my $wday,my $yday,my $isdst) = localtime(time);

  print "time = $hour:$min:$sec\n";
  $year += 1900 ;
  $mon += 1;
  my $datetime = "$year-$mon-$mday $hour:$min:$sec";

  $datetimeGlobal = $datetime;
  print $datetimeGlobal."\n";





# find record from radact  wich $datetimeGlobal in range or (>start time and stoptime==null) order by starttime dec
  
  my $strquery1 = "SELECT acctstarttime, acctstoptime, radacctid, callingstationid FROM radacct WHERE STR_TO_DATE( acctstarttime,  '%Y-%m-%d %H:%i:%s' ) <  '$datetimeGlobal' AND ( STR_TO_DATE( acctstoptime,  '%Y-%m-%d %H:%i:%s' ) >  '$datetimeGlobal'   OR acctstoptime IS NULL ) ORDER BY STR_TO_DATE( acctstarttime,  '%Y-%m-%d %H:%i:%s' ) DESC ";
  
  #print "$strquery1 \n";

  my $sth2 = $dbh2->prepare("$strquery1");

  $sth2->execute()  or die $DBI::errstr;
  
  my $row;
  my $strnull;
  while ($row = $sth2->fetchrow_arrayref()) {

      if(!@$row[1]){
        $strnull = "-";
      }
      else {
        $strnull = @$row[1];
      }
      print "@$row[0] \t  $strnull \t @$row[2] \t @$row[3] \n";



      # check by mac if have same mac more than 1 reccord  use last
      if(!$hash00{@$row[3]}){
        # add [ mac | radacct ref ] to hash array
        $hash00{@$row[3]} = @$row[2];
      }
  }




  print Dumper(\%hash00);

  $sth2->finish();
  $dbh2->commit or die $DBI::errstr;


 


getv4($taget_v6address);
getv6($taget_v6address);



# clear  Global list for next round.
@arraynew88 = ();
@arraynew99 = ();
%hash00 = ();

  print "\nfinish round . \n\n\n";


}


########################################################### main ###########################################################


my $filename =  basename($0);
my $runncheck = `pgrep -c $filename`;

if( $runncheck > 1 ){
    print "this program already running.\n";



    exit;
}
else{
    print "start program.\n\n";
}




@init = getInitialValue();
$switch_v6address = $init[1];
$interval = $init[3];

print "time interval = $interval min\n";
print "switch address = $switch_v6address\n";

getValue($switch_v6address);
#while(1){
   # getValue($switch_v6address);
#    sleep($interval);
#}
